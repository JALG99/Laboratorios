tinytex::install_tinytex()
tinytex::is_tinytex()
tinytex:::is_tinytex()
n <- floor(rnorm(10000, 500, 100))
t <- table(n)
barplot(t)
n <- floor(rnorm(10000, 500, 100))
n
t <- table(n)
t
barplot(table(floor(rnorm(10000, 500, 100))), xlab="Numbers", ylab="Frequencies")
n <- c(2, 3, 5, 10, 14)
mean(n)
source("example.R ")
titanic<-read.csv("https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv", header = TRUE, sep = ",")
titanic_data<read.csv("D:/Downloads/titanic_data.csv", header = TRUE, sep = ",")
titanic_data<-read.csv("D:/Downloads/titanic_data.csv", header = TRUE, sep = ",")
View(titanic_data)
head(titanic_data, n)
head(titanic_data)
head(titanic_data, 10)
names(titanic_data)
str(titanic_data)
summary(titanic_data)
summary(titanic_data$Age)
titanic_data$Survived <- as.factor(titanic_data$Survived)
titanic_data$Pclass <- as.factor(titanic_data$Pclass)
titanic_data$Sex <- as.factor(titanic_data$Sex)
titanic_data$Embarked <- as.factor(titanic_data$Embarked)
str(titanic_data)
#funcion que desliga cuantos valores NA posee cada variable
sin_valor <- function(0) {}
sin_valor <- function(0) {
sum = 0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
}
}
sin_valor <- function(0) {
+    sum = 0
+    for(i in 1:ncol(x)){
+    cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+    }
+}
sin_valor <-function(x){sum = 0for(i in 1:ncol(x)){cat("En la columna",colnames(x[i]),"total de valores NA:",colSums(is.na(x[i])),"\n")}}
sin_valor <- function(0) {
+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(0) {+   sum = 0+   for(i in 1:ncol(x)){+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")+   }+ }
sin_valor <- function(x) {+   sum = 0+   for(i in 1:ncol(x)){+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")+   }+ }
sin_valor <- function(x) {
+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {
sum=0
for(i in 1:ncol(x)){}
}
View(sin_valor)
View(sin_valor)
View(sin_valor)
sin_valor <- function(x) {
sum=0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores NA: ", colSums(is.na(x[i])),"\n")
}
}
View(sin_valor)
View(sin_valor)
sin_valor(titanic_data)
#funcion en_blanco(dataframe) que desliega cuantos valores en blancoposee cada variable
en_blanco <- function(x) {
sum = 0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores en blanco", colSums(x[i]==""), "\n")
}
}
en_blanco(titanic_data)
titanic_data$PassengerId[titanic_data$Embarked==""]
titanic_data$Pclass[titanic_data&PassengerId==62]
titanic_data$Pclass[titanic_data&PassengerId == 62]
titanic_data$Pclass[titanic_data$PassengerId == 62]
titanic_data$Fare[titanic_data$PassengerId == 62]
titanic_data$Pclass[titanic_data$PassengerId == 830]
titanic_data$Fare[titanic_data$PassengerId == 830]
library(dplyr)
embark_fare<-titanic_data%>%filter(PassengerId!=62 & PassengerId!=830)
View(embark_fare)
library(ggplot2)
library(scales)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
library(ggplot2)+}
library(ggplot2)+}
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("scales")
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
install.packages("ggplot")
library(ggplot2)
library(scales)
ggplot(data = embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd = 2) +
scale_y_continuous(labels = dollar_format()) +
theme_bw()
titanic_data$Embarked[c(62, 830)] <-"C"
table(titanic_data$Survived)
barplot
barplot(table(titanic_data$Survived), main="Pasajeros en Titanic", + names= c("Murieron", "Sobrevivieron"))
barplot(table(titanic_data$Survived), main="Pasajeros en Titanic", names= c("Murieron", "Sobrevivieron"))
prop.table(table(titanic_data$Survived))
barplot(table(titanic_data$Pclass), main="Pasajeros de Titanic por Clase", names= c("Primera", "Segunda", "Tercera"))
table(titanic_data$Sex)
barplot(table(titanic_data$Sex), main="Pasajeros del Titanic por Genero", names= c("Mujer", "Hombre"))
counts=table(titanic_data$Survived, titanic_data$Sex)
barplot(counts, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Genero")
counts1=table(titanic_data$Survived, titanic_data$Pclass)
barplot(counts1, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Clase")
barplot(counts1, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Clase", names=c("Primera", "Segunda", "Tercera"))
install.packages("rvest")
install.packages("xml")
install.packages("XML")
install.packages("XML")
install.packages("xml")
install.packages("xml2")
library(rvest)
setwd("C:/RStudio Projects/Lab3")
data <- read.csv("../datos/missing-data.csv", na.strings = "")
data <- read.csv("..Lab3/datos/missing-data.csv", na.strings = "")
data <- read.csv("../Lab3/datos/missing-data.csv", na.strings = "")
View(data)
data.limpia <- na.omit(data)
View(data.limpia)
View(data.limpia)
is.na(data[4,2])
is.na(data[4,1])
is.na(data$Income)
data.income.limpio <- data.income.limpio[!is.na(data$Income),]
data.income.limpio <- data[!is.na(data$Income),]
View(data.income.limpio)
complete.cases(data)
data.limpia2 <- data[complete.cases(data),]
data$Income[data$Income == 0]
data$Income[data$Income == 0] <- NA
data$Income[data$Income == 0]
mean(data$Income)
mean(data$Income, na.rm = TRUE)
sd(data$Income)
sd(data$Income, na.rm = TRUE)
sum(data$Income)
sum(data$Income, na.rm = TRUE)
data <- read.csv("../Lab3/datos/missing-data.csv", na.strings = "")
data$Income[data$Income == 0] <- NA
View(data)
data$Income.mean <- ifelse(is.na(data$Income), mean(data$Income, na.rm = TRUE), data$Income)
View(data)
Caso2
rand.valor <- function(x){
faltantes <- is.na(x)
tot.faltantes <- sum(faltantes)
x.obs <- x[!faltantes]
valorado <- x
valorado[faltantes] <- sample(x.obs, tot.faltantes, replace = TRUE)
return(valorado)
}
random.df <- function(df, cols){
nombres <- names(df)
for (col in cols) {
nombre <- paste(nombres[col], "valorado", sep = ".")
df[nombre] <- rand.valor(df[,col])
}
df
}
View(rand.valor)
data.limpio <- random.df(data, c(1,2))
View(data.limpio)
familia.salario <- c(40000,60000,50000, 80000, 60000, 70000, 60000)
familia.integrantes <- c(4,3,2,2,3,4,3)
familia.auto <- c("Lujo", "Compacto", "SUV", "Lujo", "Compacto", "Compacto", "Compacto")
familia <- data.frame(familia.salario, familia.integrantes, familia.auto)
View(familia)
duplicated(familia)
familia[duplicated(familia)]
familia[duplicated(familia),]
unique(familia)
familias.unicas <- unique(familia)
View(familias.unicas)
familia.salario <- c(40000,60000,50000, 80000, 60000, 70000, 60000)
familia.integrantes <- c(4,3,2,2,3,4,3)
familia.auto <- c("Lujo", "Compacto", "SUV", "Lujo", "Compacto", "Compacto", "Compacto")
familia <- data.frame(familia.salario, familia.integrantes, familia.auto)
View(familia)
duplicated(familia)
familia[duplicated(familia),]
unique(familia)
familias.unicas <- unique(familia)
View(familias.unicas)
