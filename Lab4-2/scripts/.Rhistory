tinytex::install_tinytex()
tinytex::is_tinytex()
tinytex:::is_tinytex()
n <- floor(rnorm(10000, 500, 100))
t <- table(n)
barplot(t)
n <- floor(rnorm(10000, 500, 100))
n
t <- table(n)
t
barplot(table(floor(rnorm(10000, 500, 100))), xlab="Numbers", ylab="Frequencies")
n <- c(2, 3, 5, 10, 14)
mean(n)
source("example.R ")
titanic<-read.csv("https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv", header = TRUE, sep = ",")
titanic_data<read.csv("D:/Downloads/titanic_data.csv", header = TRUE, sep = ",")
titanic_data<-read.csv("D:/Downloads/titanic_data.csv", header = TRUE, sep = ",")
View(titanic_data)
head(titanic_data, n)
head(titanic_data)
head(titanic_data, 10)
names(titanic_data)
str(titanic_data)
summary(titanic_data)
summary(titanic_data$Age)
titanic_data$Survived <- as.factor(titanic_data$Survived)
titanic_data$Pclass <- as.factor(titanic_data$Pclass)
titanic_data$Sex <- as.factor(titanic_data$Sex)
titanic_data$Embarked <- as.factor(titanic_data$Embarked)
str(titanic_data)
#funcion que desliga cuantos valores NA posee cada variable
sin_valor <- function(0) {}
sin_valor <- function(0) {
sum = 0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
}
}
sin_valor <- function(0) {
+    sum = 0
+    for(i in 1:ncol(x)){
+    cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+    }
+}
sin_valor <-function(x){sum = 0for(i in 1:ncol(x)){cat("En la columna",colnames(x[i]),"total de valores NA:",colSums(is.na(x[i])),"\n")}}
sin_valor <- function(0) {
+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(0) {+   sum = 0+   for(i in 1:ncol(x)){+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")+   }+ }
sin_valor <- function(x) {+   sum = 0+   for(i in 1:ncol(x)){+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")+   }+ }
sin_valor <- function(x) {
+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {
sum=0
for(i in 1:ncol(x)){}
}
View(sin_valor)
View(sin_valor)
View(sin_valor)
sin_valor <- function(x) {
sum=0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores NA: ", colSums(is.na(x[i])),"\n")
}
}
View(sin_valor)
View(sin_valor)
sin_valor(titanic_data)
#funcion en_blanco(dataframe) que desliega cuantos valores en blancoposee cada variable
en_blanco <- function(x) {
sum = 0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores en blanco", colSums(x[i]==""), "\n")
}
}
en_blanco(titanic_data)
titanic_data$PassengerId[titanic_data$Embarked==""]
titanic_data$Pclass[titanic_data&PassengerId==62]
titanic_data$Pclass[titanic_data&PassengerId == 62]
titanic_data$Pclass[titanic_data$PassengerId == 62]
titanic_data$Fare[titanic_data$PassengerId == 62]
titanic_data$Pclass[titanic_data$PassengerId == 830]
titanic_data$Fare[titanic_data$PassengerId == 830]
library(dplyr)
embark_fare<-titanic_data%>%filter(PassengerId!=62 & PassengerId!=830)
View(embark_fare)
library(ggplot2)
library(scales)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
library(ggplot2)+}
library(ggplot2)+}
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("scales")
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
install.packages("ggplot")
library(ggplot2)
library(scales)
ggplot(data = embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd = 2) +
scale_y_continuous(labels = dollar_format()) +
theme_bw()
titanic_data$Embarked[c(62, 830)] <-"C"
table(titanic_data$Survived)
barplot
barplot(table(titanic_data$Survived), main="Pasajeros en Titanic", + names= c("Murieron", "Sobrevivieron"))
barplot(table(titanic_data$Survived), main="Pasajeros en Titanic", names= c("Murieron", "Sobrevivieron"))
prop.table(table(titanic_data$Survived))
barplot(table(titanic_data$Pclass), main="Pasajeros de Titanic por Clase", names= c("Primera", "Segunda", "Tercera"))
table(titanic_data$Sex)
barplot(table(titanic_data$Sex), main="Pasajeros del Titanic por Genero", names= c("Mujer", "Hombre"))
counts=table(titanic_data$Survived, titanic_data$Sex)
barplot(counts, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Genero")
counts1=table(titanic_data$Survived, titanic_data$Pclass)
barplot(counts1, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Clase")
barplot(counts1, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Clase", names=c("Primera", "Segunda", "Tercera"))
install.packages("rvest")
install.packages("xml")
install.packages("XML")
install.packages("XML")
install.packages("xml")
install.packages("xml2")
library(rvest)
setwd("C:/RStudio Projects/LaboratoriosR/Lab4-2")
setwd("C:/RStudio Projects/LaboratoriosR/Lab4-2/scripts")
estudiantes <- read.csv("../Lab4-2/scripts/data-conversion.csv")
estudiantes <- read.csv("../LaboratoriosR/Lab4-2/scripts/data-conversion.csv")
estudiantes <- read.csv("../scripts/data-conversion.csv")
estudiantes <- read.csv("../Lab4-2/datos/data-conversion.csv")
estudiantes <- read.csv("../LaboratoriosR/Lab4-2/datos/data-conversion.csv")
estudiantes <- read.csv("../datos/data-conversion.csv")
View(estudiantes)
niveles <- c(-Inf, 1000, 3100, Inf)
nom.nivel <- c('Bajo', 'Medio', 'Alto')
estudiantes$Income.cat <- cut(estudiantes$Income, breaks = niveles, labels = nom.nivel)
View(estudiantes)
str(estudiantes)
estudiantes$Income.cat2 <- cut(estudiantes$Income, breaks = 4, labels = c("Nivel 1", "Nivel 2", "Nivel 3", "Nivel 4"))
View(estudiantes)
estudiantes <- read.csv("../datos/data-conversion.csv")
install.packages("dummies")
library(dummies)
estudiantes.dummy <- dummy.data.frame(estudiantes, sep = ".")
names(estudiantes.dummy)
View(estudiantes.dummy)
dummy(estudiantes$State, sep=".")
dummy.data.frame(estudiantes, names = c("State"), sep =".")
dummy.data.frame(estudiantes, names = c("State", "Gender"), sep =".")
ozone.data <- read.csv("../datos/ozone.cs", stringsAsFactors = FALSE)
ozone.data <- read.csv("../Lab4-2/datos/ozone.cs", stringsAsFactors = FALSE)
ozone.data <- read.csv("../datos/ozone.csv", stringsAsFactors = FALSE)
View(ozone.data)
outliers.values <- boxplot(ozone.data$pressure_height)$out
outliers.values
summary(ozone.data$pressure_height)
boxplot(ozone.data$pressure_height)
boxplot(ozone.data$pressure_height, main = "Presure Height", boxwex = 0.5)
boxplot(pressure_height ~ Month, data = ozone.data, main = "Presure Height per Month")
boxplot(ozone_reading ~ Month, data = ozone.data, main = "Ozone reading per Month")
boxplot(ozone_reading ~ Month, data = ozone.data, main = "Ozone reading per Month")$out
fix_outliers <- function(x, removeNA = TRUE){
#Calculamos los quantiles 1) por arriba del 5% y por debajo del 95%
quantiles <- quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x<quantiles[2]] <- median(x, na.rm = removeNA)
x
}
sin.outliers <- fix_outliers(ozone.data$pressure_height)
boxplot(fix.outliers(ozone.data$pressure_height), main = "Presión sin Outliers")
boxplot(fix_outliers(ozone.data$pressure_height), main = "Presión sin Outliers")
boxplot(sin.outliers(ozone.data$pressure_height), main = "Presión sin Outliers")
fix_outliers <- function(x, removeNA = TRUE){
#Calculamos los quantiles 1) por arriba del 5% y por debajo del 95%
quantiles <- quantile(x, c(0.05, 0.95), na.rm = removeNA)
x[x<quantiles[1]] <- mean(x, na.rm = removeNA)
x[x>quantiles[2]] <- median(x, na.rm = removeNA)
x
}
boxplot(fix_outliers(ozone.data$pressure_height), main = "Presión sin Outliers")
boxplot(ozone.data$pressure_height, main = "Presión con Outliers")
boxplot(fix_outliers(ozone.data$pressure_height), main = "Presión con Outliers")
replace_otuliers <- function(x, removeNA = TRUE){
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
#si el outlier esta por debajo del cuartil 0.5 o por arriba de 0.95
caps <- quantile(x, probs = c(.05, .95), na.rm = removeNA)
#Calulamos el rango intercuartilico
iqr <- qrts[2]-qrts[1]
#Calculamos el 1.5 veces el rango intercuartilico (iqr)
altura <- 1.5*iqr
#reemplazamos del vector los outliers por debajo de 0.05 y 0.95
x[x<qrts[1]-altura] <- caps[1]
x[x<qrts[2]+altura] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(fix_outliers(ozone.data$pressure_height), main = "Presión con Outliers")
boxplot(ozone.data$pressure_height, main = "Presión con Outliers")
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height, main = "Presión con Outliers")
boxplot(replace_otuliers(ozone.data$pressure_height), main = "Presión sin Outliers")
replace_otuliers <- function(x, removeNA = TRUE){
qrts <- quantile(x, probs = c(0.25, 0.75), na.rm = removeNA)
#si el outlier esta por debajo del cuartil 0.5 o por arriba de 0.95
caps <- quantile(x, probs = c(.05, .95), na.rm = removeNA)
#Calulamos el rango intercuartilico
iqr <- qrts[2]-qrts[1]
#Calculamos el 1.5 veces el rango intercuartilico (iqr)
altura <- 1.5*iqr
#reemplazamos del vector los outliers por debajo de 0.05 y 0.95
x[x<qrts[1]-altura] <- caps[1]
x[x>qrts[2]+altura] <- caps[2]
x
}
par(mfrow = c(1,2))
boxplot(ozone.data$pressure_height, main = "Presión con Outliers")
boxplot(replace_otuliers(ozone.data$pressure_height), main = "Presión sin Outliers")
clientes <- c("Arturo", "Bill", "Jack")
fechas <- c("2021-05-01", "2021-04-28", "2021-03-30")
pagos <- c(315.1, 205.4, 450.2)
fehcas <- as.Date(c("2021-05-01", "2021-04-28", "2021-03-30"))
rm(fehcas)
pedidos <- data.frame(clientes, fechas, pagos)
View(pedidos)
save(pedidos, file="../datos/pedidos.Rdata")
save(pedidos, cliente.frec, file = "../datos/pedidos.Rdata")
cliente.frec <- c("Arturo", "Jack")
save(pedidos, cliente.frec, file = "../datos/pedidos.Rdata")
save.image(file="../datos/alldata.Rdata")
saveRDS(pedidos, file = "../datos/pedidos.rds")
remove(pedidos)
load("../datos/pedidos.RData")
attach("../datos/pedidos.RData")
orders <- readRDS("../datos/pedidos.rds")
write.csv(pedidos,'../datos/pedidos.csv', na = "NA", row.names = FALSE)
write.csv(pedidos, '../datos/pedidos2.csv', na = "NA")
