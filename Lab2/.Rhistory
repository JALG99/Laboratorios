tinytex::install_tinytex()
tinytex::is_tinytex()
tinytex:::is_tinytex()
n <- floor(rnorm(10000, 500, 100))
t <- table(n)
barplot(t)
n <- floor(rnorm(10000, 500, 100))
n
t <- table(n)
t
barplot(table(floor(rnorm(10000, 500, 100))), xlab="Numbers", ylab="Frequencies")
n <- c(2, 3, 5, 10, 14)
mean(n)
source("example.R ")
titanic<-read.csv("https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv", header = TRUE, sep = ",")
titanic_data<read.csv("D:/Downloads/titanic_data.csv", header = TRUE, sep = ",")
titanic_data<-read.csv("D:/Downloads/titanic_data.csv", header = TRUE, sep = ",")
View(titanic_data)
head(titanic_data, n)
head(titanic_data)
head(titanic_data, 10)
names(titanic_data)
str(titanic_data)
summary(titanic_data)
summary(titanic_data$Age)
titanic_data$Survived <- as.factor(titanic_data$Survived)
titanic_data$Pclass <- as.factor(titanic_data$Pclass)
titanic_data$Sex <- as.factor(titanic_data$Sex)
titanic_data$Embarked <- as.factor(titanic_data$Embarked)
str(titanic_data)
#funcion que desliga cuantos valores NA posee cada variable
sin_valor <- function(0) {}
sin_valor <- function(0) {
sum = 0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
}
}
sin_valor <- function(0) {
+    sum = 0
+    for(i in 1:ncol(x)){
+    cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+    }
+}
sin_valor <-function(x){sum = 0for(i in 1:ncol(x)){cat("En la columna",colnames(x[i]),"total de valores NA:",colSums(is.na(x[i])),"\n")}}
sin_valor <- function(0) {
+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(0) {+   sum = 0+   for(i in 1:ncol(x)){+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")+   }+ }
sin_valor <- function(x) {+   sum = 0+   for(i in 1:ncol(x)){+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")+   }+ }
sin_valor <- function(x) {
+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {+   sum = 0
+   for(i in 1:ncol(x)){
+   cat("En la columna", colnames(x[i]), "total de valores NA:", colSums(is.na(x[i])),"\n")
+   }
+ }
sin_valor <- function(x) {
sum=0
for(i in 1:ncol(x)){}
}
View(sin_valor)
View(sin_valor)
View(sin_valor)
sin_valor <- function(x) {
sum=0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores NA: ", colSums(is.na(x[i])),"\n")
}
}
View(sin_valor)
View(sin_valor)
sin_valor(titanic_data)
#funcion en_blanco(dataframe) que desliega cuantos valores en blancoposee cada variable
en_blanco <- function(x) {
sum = 0
for(i in 1:ncol(x)){
cat("En la columna", colnames(x[i]), "total de valores en blanco", colSums(x[i]==""), "\n")
}
}
en_blanco(titanic_data)
titanic_data$PassengerId[titanic_data$Embarked==""]
titanic_data$Pclass[titanic_data&PassengerId==62]
titanic_data$Pclass[titanic_data&PassengerId == 62]
titanic_data$Pclass[titanic_data$PassengerId == 62]
titanic_data$Fare[titanic_data$PassengerId == 62]
titanic_data$Pclass[titanic_data$PassengerId == 830]
titanic_data$Fare[titanic_data$PassengerId == 830]
library(dplyr)
embark_fare<-titanic_data%>%filter(PassengerId!=62 & PassengerId!=830)
View(embark_fare)
library(ggplot2)
library(scales)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),)
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
library(ggplot2)+}
library(ggplot2)+}
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("scales")
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
ggplot(data = embark_fare, aes(x = Embarked, y =Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd =2) +
scale_y_continuous(labels = dollar_format())+
theme_bw()
install.packages("ggplot")
library(ggplot2)
library(scales)
ggplot(data = embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
geom_boxplot() +
geom_hline(aes(yintercept = 80),
colour = "red", linetype = "dashed", lwd = 2) +
scale_y_continuous(labels = dollar_format()) +
theme_bw()
titanic_data$Embarked[c(62, 830)] <-"C"
table(titanic_data$Survived)
barplot
barplot(table(titanic_data$Survived), main="Pasajeros en Titanic", + names= c("Murieron", "Sobrevivieron"))
barplot(table(titanic_data$Survived), main="Pasajeros en Titanic", names= c("Murieron", "Sobrevivieron"))
prop.table(table(titanic_data$Survived))
barplot(table(titanic_data$Pclass), main="Pasajeros de Titanic por Clase", names= c("Primera", "Segunda", "Tercera"))
table(titanic_data$Sex)
barplot(table(titanic_data$Sex), main="Pasajeros del Titanic por Genero", names= c("Mujer", "Hombre"))
counts=table(titanic_data$Survived, titanic_data$Sex)
barplot(counts, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Genero")
counts1=table(titanic_data$Survived, titanic_data$Pclass)
barplot(counts1, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Clase")
barplot(counts1, col=c("green","yellow"),legend=c("Murieron", "Sobrevivieron"), main="Sobrevivencia de Pasajeros por Clase", names=c("Primera", "Segunda", "Tercera"))
install.packages("rvest")
install.packages("xml")
install.packages("XML")
install.packages("XML")
install.packages("xml")
install.packages("xml2")
library(rvest)
save.image("C:/RStudio Projects/Praticando/PracticandoEnviroment.RData")
install.packages("jsonlite"")
install.packages("jsonlite"")
install.packages("jsonlite"")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
ine.url <- "https://servicios.ine.es/wstempus/js/ES/DATOS_TABLA/2852?nult=5&tip=AM"
pob.esp <- fromJSON(ine.url)
View(pob.esp)
cur.url <- "https://www.floatrates.com/daily/usd.json"
setwd("C:/RStudio Projects/Lab5")
currency <- fromJSON(cur.url)
View(currency)
stu.file <- "C:\RStudio Projects\Lab5\students.json"
stu.file <- "students.json"
students <- fromJSON(stu.file)
cou.file <- "student-courses.json"
courses <- fromJSON(cou.file)
install.packages("XML")
library(XML)
bn.url <- "http://api.worldbank.org/v2/countries/all/indicators/NY.GDP.MKTP.CD?date=2019:2020&per_page=500&page=1"
rm(bn.url)
bm.url <- "http://api.worldbank.org/v2/countries/all/indicators/NY.GDP.MKTP.CD?date=2019:2020&per_page=500&page=1"
bm.doc <- xmlParse(bm.url)
root.node <- xmlRoot(bm.doc)
root.node[1]
root.node[2]
bm.data <- xmlSApply(root.node, function(x) xmlSApply(x, xmlValue))
View(bm.data)
bm.datos <- data.frame(t(bm.data), row.names = NULL)
View(bm.datos)
install.packages("XML")
install.packages("XML")
library(XML)
cd.file <- "cd_catalog.xml"
cd.doc <- xmlParse(cd.file)
root.nodecd <- xmlRoot(cd.doc)
root.nodecd[1]
root.nodecd[2]
cd.data <- xmlSApply(root.nodecd, function(x) xmlSApply(x, xmlValue))
cd.datos <- data.frame(t(cd.data), row.names = NULL)
View(cd.data)
View(cd.datos)
auto <- read.csv("auto-mpg.csv", header = TRUE, sep = ",")
names(auto)
wpob.url <- "WorldPopulation-wiki.html"
tablas <- readHTMLTable(wpob.url)
View(tablas)
most_wpob <- tablas[[5]]
View(most_wpob)
head(most_wpob, 3)
tabla_unica <- readHTMLTable(wpob.url, which = 5)
